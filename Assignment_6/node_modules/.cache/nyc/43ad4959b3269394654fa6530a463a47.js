var cov_1w1sck1gbe=function(){var path="C:\\Users\\Dinesh Krishna\\Desktop\\sem7\\placements\\rently\\session on node.js\\assignment_6\\index.js",hash="b0073ffdeeac466773cd28b114f96377f7892071",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"C:\\Users\\Dinesh Krishna\\Desktop\\sem7\\placements\\rently\\session on node.js\\assignment_6\\index.js",statementMap:{"0":{start:{line:1,column:12},end:{line:1,column:30}},"1":{start:{line:2,column:17},end:{line:2,column:39}},"2":{start:{line:3,column:19},end:{line:3,column:43}},"3":{start:{line:6,column:12},end:{line:6,column:39}},"4":{start:{line:7,column:15},end:{line:7,column:47}},"5":{start:{line:8,column:0},end:{line:8,column:19}},"6":{start:{line:11,column:0},end:{line:11,column:29}},"7":{start:{line:13,column:0},end:{line:13,column:40}},"8":{start:{line:15,column:0},end:{line:36,column:3}},"9":{start:{line:16,column:20},end:{line:16,column:28}},"10":{start:{line:17,column:8},end:{line:33,column:5}},"11":{start:{line:19,column:8},end:{line:27,column:10}},"12":{start:{line:20,column:12},end:{line:26,column:13}},"13":{start:{line:21,column:16},end:{line:21,column:23}},"14":{start:{line:24,column:16},end:{line:24,column:53}},"15":{start:{line:32,column:8},end:{line:32,column:36}},"16":{start:{line:39,column:0},end:{line:47,column:3}},"17":{start:{line:41,column:14},end:{line:41,column:46}},"18":{start:{line:44,column:4},end:{line:44,column:37}},"19":{start:{line:45,column:4},end:{line:45,column:11}},"20":{start:{line:49,column:0},end:{line:62,column:3}},"21":{start:{line:51,column:4},end:{line:58,column:7}},"22":{start:{line:52,column:8},end:{line:56,column:9}},"23":{start:{line:53,column:12},end:{line:53,column:19}},"24":{start:{line:55,column:12},end:{line:55,column:39}},"25":{start:{line:65,column:0},end:{line:80,column:3}},"26":{start:{line:68,column:4},end:{line:76,column:7}},"27":{start:{line:69,column:8},end:{line:75,column:9}},"28":{start:{line:71,column:12},end:{line:71,column:19}},"29":{start:{line:74,column:12},end:{line:74,column:49}},"30":{start:{line:81,column:0},end:{line:81,column:45}},"31":{start:{line:84,column:0},end:{line:94,column:3}},"32":{start:{line:87,column:4},end:{line:93,column:3}},"33":{start:{line:88,column:8},end:{line:92,column:9}},"34":{start:{line:89,column:12},end:{line:89,column:19}},"35":{start:{line:91,column:12},end:{line:91,column:37}},"36":{start:{line:95,column:0},end:{line:95,column:47}},"37":{start:{line:98,column:0},end:{line:116,column:3}},"38":{start:{line:99,column:4},end:{line:114,column:5}},"39":{start:{line:101,column:8},end:{line:109,column:11}},"40":{start:{line:102,column:12},end:{line:108,column:13}},"41":{start:{line:103,column:16},end:{line:103,column:23}},"42":{start:{line:107,column:16},end:{line:107,column:53}},"43":{start:{line:112,column:8},end:{line:112,column:41}},"44":{start:{line:119,column:0},end:{line:130,column:3}},"45":{start:{line:122,column:4},end:{line:129,column:7}},"46":{start:{line:123,column:8},end:{line:127,column:9}},"47":{start:{line:124,column:12},end:{line:124,column:19}},"48":{start:{line:126,column:12},end:{line:126,column:38}},"49":{start:{line:133,column:0},end:{line:136,column:3}},"50":{start:{line:134,column:4},end:{line:134,column:48}},"51":{start:{line:139,column:0},end:{line:141,column:3}},"52":{start:{line:140,column:0},end:{line:140,column:21}},"53":{start:{line:144,column:0},end:{line:150,column:3}},"54":{start:{line:146,column:0},end:{line:149,column:7}},"55":{start:{line:147,column:4},end:{line:147,column:21}},"56":{start:{line:153,column:0},end:{line:160,column:3}},"57":{start:{line:155,column:4},end:{line:158,column:7}},"58":{start:{line:156,column:8},end:{line:156,column:25}},"59":{start:{line:163,column:0},end:{line:174,column:3}},"60":{start:{line:165,column:4},end:{line:173,column:7}},"61":{start:{line:166,column:8},end:{line:171,column:9}},"62":{start:{line:167,column:12},end:{line:167,column:75}},"63":{start:{line:170,column:12},end:{line:170,column:76}},"64":{start:{line:177,column:0},end:{line:179,column:3}},"65":{start:{line:178,column:4},end:{line:178,column:49}},"66":{start:{line:181,column:0},end:{line:181,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:15,column:21},end:{line:15,column:22}},loc:{start:{line:15,column:37},end:{line:36,column:1}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:19,column:53},end:{line:19,column:54}},loc:{start:{line:19,column:61},end:{line:27,column:9}},line:19},"2":{name:"(anonymous_2)",decl:{start:{line:39,column:21},end:{line:39,column:22}},loc:{start:{line:39,column:37},end:{line:47,column:1}},line:39},"3":{name:"(anonymous_3)",decl:{start:{line:49,column:32},end:{line:49,column:33}},loc:{start:{line:49,column:48},end:{line:62,column:1}},line:49},"4":{name:"(anonymous_4)",decl:{start:{line:51,column:68},end:{line:51,column:69}},loc:{start:{line:51,column:76},end:{line:58,column:5}},line:51},"5":{name:"(anonymous_5)",decl:{start:{line:65,column:26},end:{line:65,column:27}},loc:{start:{line:65,column:42},end:{line:80,column:1}},line:65},"6":{name:"(anonymous_6)",decl:{start:{line:68,column:50},end:{line:68,column:51}},loc:{start:{line:68,column:58},end:{line:76,column:5}},line:68},"7":{name:"(anonymous_7)",decl:{start:{line:84,column:26},end:{line:84,column:27}},loc:{start:{line:84,column:42},end:{line:94,column:1}},line:84},"8":{name:"(anonymous_8)",decl:{start:{line:87,column:51},end:{line:87,column:52}},loc:{start:{line:87,column:59},end:{line:93,column:1}},line:87},"9":{name:"(anonymous_9)",decl:{start:{line:98,column:28},end:{line:98,column:29}},loc:{start:{line:98,column:44},end:{line:116,column:1}},line:98},"10":{name:"(anonymous_10)",decl:{start:{line:101,column:54},end:{line:101,column:55}},loc:{start:{line:101,column:62},end:{line:109,column:9}},line:101},"11":{name:"(anonymous_11)",decl:{start:{line:119,column:28},end:{line:119,column:29}},loc:{start:{line:119,column:44},end:{line:130,column:1}},line:119},"12":{name:"(anonymous_12)",decl:{start:{line:122,column:59},end:{line:122,column:60}},loc:{start:{line:122,column:67},end:{line:129,column:5}},line:122},"13":{name:"(anonymous_13)",decl:{start:{line:133,column:22},end:{line:133,column:23}},loc:{start:{line:133,column:33},end:{line:136,column:1}},line:133},"14":{name:"(anonymous_14)",decl:{start:{line:139,column:17},end:{line:139,column:18}},loc:{start:{line:139,column:28},end:{line:141,column:1}},line:139},"15":{name:"(anonymous_15)",decl:{start:{line:144,column:32},end:{line:144,column:33}},loc:{start:{line:144,column:43},end:{line:150,column:1}},line:144},"16":{name:"(anonymous_16)",decl:{start:{line:146,column:46},end:{line:146,column:47}},loc:{start:{line:146,column:56},end:{line:149,column:5}},line:146},"17":{name:"(anonymous_17)",decl:{start:{line:153,column:26},end:{line:153,column:27}},loc:{start:{line:153,column:37},end:{line:160,column:1}},line:153},"18":{name:"(anonymous_18)",decl:{start:{line:155,column:31},end:{line:155,column:32}},loc:{start:{line:155,column:41},end:{line:158,column:5}},line:155},"19":{name:"(anonymous_19)",decl:{start:{line:163,column:28},end:{line:163,column:29}},loc:{start:{line:163,column:39},end:{line:174,column:1}},line:163},"20":{name:"(anonymous_20)",decl:{start:{line:165,column:36},end:{line:165,column:37}},loc:{start:{line:165,column:46},end:{line:173,column:5}},line:165},"21":{name:"(anonymous_21)",decl:{start:{line:177,column:21},end:{line:177,column:22}},loc:{start:{line:177,column:25},end:{line:179,column:1}},line:177}},branchMap:{"0":{loc:{start:{line:17,column:8},end:{line:33,column:5}},type:"if",locations:[{start:{line:17,column:8},end:{line:33,column:5}},{start:{line:17,column:8},end:{line:33,column:5}}],line:17},"1":{loc:{start:{line:20,column:12},end:{line:26,column:13}},type:"if",locations:[{start:{line:20,column:12},end:{line:26,column:13}},{start:{line:20,column:12},end:{line:26,column:13}}],line:20},"2":{loc:{start:{line:52,column:8},end:{line:56,column:9}},type:"if",locations:[{start:{line:52,column:8},end:{line:56,column:9}},{start:{line:52,column:8},end:{line:56,column:9}}],line:52},"3":{loc:{start:{line:69,column:8},end:{line:75,column:9}},type:"if",locations:[{start:{line:69,column:8},end:{line:75,column:9}},{start:{line:69,column:8},end:{line:75,column:9}}],line:69},"4":{loc:{start:{line:88,column:8},end:{line:92,column:9}},type:"if",locations:[{start:{line:88,column:8},end:{line:92,column:9}},{start:{line:88,column:8},end:{line:92,column:9}}],line:88},"5":{loc:{start:{line:99,column:4},end:{line:114,column:5}},type:"if",locations:[{start:{line:99,column:4},end:{line:114,column:5}},{start:{line:99,column:4},end:{line:114,column:5}}],line:99},"6":{loc:{start:{line:102,column:12},end:{line:108,column:13}},type:"if",locations:[{start:{line:102,column:12},end:{line:108,column:13}},{start:{line:102,column:12},end:{line:108,column:13}}],line:102},"7":{loc:{start:{line:123,column:8},end:{line:127,column:9}},type:"if",locations:[{start:{line:123,column:8},end:{line:127,column:9}},{start:{line:123,column:8},end:{line:127,column:9}}],line:123},"8":{loc:{start:{line:166,column:8},end:{line:171,column:9}},type:"if",locations:[{start:{line:166,column:8},end:{line:171,column:9}},{start:{line:166,column:8},end:{line:171,column:9}}],line:166}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();var express=(cov_1w1sck1gbe.s[0]++,require('express'));// importing express web framework
var bodyParser=(cov_1w1sck1gbe.s[1]++,require('body-parser'));//importing body-parser (to parse the body of http requests)
var cookieParser=(cov_1w1sck1gbe.s[2]++,require('cookie-parser'));// importing cookie-parser (to parse the cookies of http requests) 
//importing custom modules
var library=(cov_1w1sck1gbe.s[3]++,require('./routes/library'));var middleware=(cov_1w1sck1gbe.s[4]++,require('./controller/services'));cov_1w1sck1gbe.s[5]++;myServer=express();// creating an instance of the server
//implementing middelwares
cov_1w1sck1gbe.s[6]++;myServer.use(cookieParser());// to parse cookies in the http request received
cov_1w1sck1gbe.s[7]++;myServer.use("/auth",bodyParser.json());// to parse the bosy of the request in json format
//this middelware is used for authenticating users
cov_1w1sck1gbe.s[8]++;myServer.use("/auth",(req,res,next)=>{cov_1w1sck1gbe.f[0]++;let requestBody=(cov_1w1sck1gbe.s[9]++,req.body);cov_1w1sck1gbe.s[10]++;if(req.method=='POST'){cov_1w1sck1gbe.b[0][0]++;cov_1w1sck1gbe.s[11]++;// checking only for a POST method
//validating user credentials using joi implented in the custom module ./controller/services.js
middleware.joiValidation(requestBody,"/auth",resp=>{cov_1w1sck1gbe.f[1]++;cov_1w1sck1gbe.s[12]++;if(resp){cov_1w1sck1gbe.b[1][0]++;cov_1w1sck1gbe.s[13]++;next();// calling the next method in the hierarchy according to the path
}else{cov_1w1sck1gbe.b[1][1]++;cov_1w1sck1gbe.s[14]++;res.send("invalid user credentials");// if joi validation failed, response is as shown
}});}else{cov_1w1sck1gbe.b[0][1]++;cov_1w1sck1gbe.s[15]++;res.send('invalid request');// if http method is not POST, the response is returned as shown
}});//this middleware is used for token generation
cov_1w1sck1gbe.s[16]++;myServer.use("/auth",(req,res,next)=>{cov_1w1sck1gbe.f[2]++;// generating a token for user authentication using jsonwebtoken middleware implemented in ./controller/services.js
let token=(cov_1w1sck1gbe.s[17]++,middleware.generateJwt(req.body));//console.log(token);  
//storing the access token at the client using the cookies
cov_1w1sck1gbe.s[18]++;res.cookie('access_token',token);//res.cookie(name,value) setting the cookie name and value 
cov_1w1sck1gbe.s[19]++;next();// calling the next method in the hierarchy according to the path
});// this middelware is used to validate the whether a <number> is given as a parameter in http GET request
cov_1w1sck1gbe.s[20]++;myServer.use("/10multiple/:num",(req,res,next)=>{cov_1w1sck1gbe.f[3]++;cov_1w1sck1gbe.s[21]++;// validating using joi implemented in the custom module ./controller/services.js
middleware.joiValidation(parseInt(req.params.num),"/10multiple",resp=>{cov_1w1sck1gbe.f[4]++;cov_1w1sck1gbe.s[22]++;if(resp){cov_1w1sck1gbe.b[2][0]++;cov_1w1sck1gbe.s[23]++;next();// calling the next method in the hierarchy according to the path
}else{cov_1w1sck1gbe.b[2][1]++;cov_1w1sck1gbe.s[24]++;res.send("invalid number");// invalid parameter, response is sent to the client as described
}});});// this middleware is used to check the cookie value for user authentication
cov_1w1sck1gbe.s[25]++;myServer.use("/charAsKey",(req,res,next)=>{cov_1w1sck1gbe.f[5]++;cov_1w1sck1gbe.s[26]++;//console.log(req.cookies);
// the cookie value is verified using jsonwebtoken module implemented in ./controller/services.js
middleware.verifyJwt(req.cookies.access_token,resp=>{cov_1w1sck1gbe.f[6]++;cov_1w1sck1gbe.s[27]++;if(resp){cov_1w1sck1gbe.b[3][0]++;cov_1w1sck1gbe.s[28]++;//console.log('token verified successfully');
next();// calling the next method in the hierarchy according to the path
}else{cov_1w1sck1gbe.b[3][1]++;cov_1w1sck1gbe.s[29]++;res.send("authenticated users only");// if invalid token, response is sent as described
}});});cov_1w1sck1gbe.s[30]++;myServer.use("/charAsKey",bodyParser.text());// this middleware parses request body as text
//this middleware validates the string
cov_1w1sck1gbe.s[31]++;myServer.use("/charAsKey",(req,res,next)=>{cov_1w1sck1gbe.f[7]++;cov_1w1sck1gbe.s[32]++;//string is validated using joi implemented in ./controller/services.js
//console.log(req.body);
middleware.joiValidation(req.body,"/charAsKey",resp=>{cov_1w1sck1gbe.f[8]++;cov_1w1sck1gbe.s[33]++;if(resp){cov_1w1sck1gbe.b[4][0]++;cov_1w1sck1gbe.s[34]++;next();// calling the next method in the hierarchy according to the path
}else{cov_1w1sck1gbe.b[4][1]++;cov_1w1sck1gbe.s[35]++;res.send("invalid data");//if validation fails, response is sent as described
}});});cov_1w1sck1gbe.s[36]++;myServer.use("/isArmstrong",bodyParser.text());// this middleware parses request body as text
//this middleware checks for user authentication
cov_1w1sck1gbe.s[37]++;myServer.use("/isArmstrong",(req,res,next)=>{cov_1w1sck1gbe.f[9]++;cov_1w1sck1gbe.s[38]++;if(req.cookies!=undefined){cov_1w1sck1gbe.b[5][0]++;cov_1w1sck1gbe.s[39]++;// checking for the presence of cookies
//verifying the token using jsonwebtoken module
middleware.verifyJwt(req.cookies.access_token,resp=>{cov_1w1sck1gbe.f[10]++;cov_1w1sck1gbe.s[40]++;if(resp){cov_1w1sck1gbe.b[6][0]++;cov_1w1sck1gbe.s[41]++;next();// calling the next method in the hierarchy according to the path
}else{cov_1w1sck1gbe.b[6][1]++;cov_1w1sck1gbe.s[42]++;res.send("authenticated users only");// if token verification fails, response is sent as described
}});}else{cov_1w1sck1gbe.b[5][1]++;cov_1w1sck1gbe.s[43]++;res.send("unauthenticated user");// if no presence of a cookie , this repsonse is sent
}});//this middleware validates whether it is a number
cov_1w1sck1gbe.s[44]++;myServer.use("/isArmstrong",(req,res,next)=>{cov_1w1sck1gbe.f[11]++;cov_1w1sck1gbe.s[45]++;//validation is done using joi module
middleware.joiValidation(req.query.num,"/isArmstrong",resp=>{cov_1w1sck1gbe.f[12]++;cov_1w1sck1gbe.s[46]++;if(resp){cov_1w1sck1gbe.b[7][0]++;cov_1w1sck1gbe.s[47]++;next();// calling the next method in the hierarchy according to the path
}else{cov_1w1sck1gbe.b[7][1]++;cov_1w1sck1gbe.s[48]++;res.send("invalid number");// if the number is invalid, response is sent as described
}});});// upon successful user authentication, this POST method is handled
cov_1w1sck1gbe.s[49]++;myServer.post("/auth",(req,res)=>{cov_1w1sck1gbe.f[13]++;cov_1w1sck1gbe.s[50]++;res.send("user authenticated successfully");});// handles an empty GET request
cov_1w1sck1gbe.s[51]++;myServer.get('/',(req,res)=>{cov_1w1sck1gbe.f[14]++;cov_1w1sck1gbe.s[52]++;res.send("Hello DK");});//upon successful validation of a number in the specified path, the GET request is processed
cov_1w1sck1gbe.s[53]++;myServer.get("/10multiple/:num",(req,res)=>{cov_1w1sck1gbe.f[15]++;cov_1w1sck1gbe.s[54]++;//this function is used to return the first ten multiples of the given number
library.tenMultiples(parseInt(req.params.num),result=>{cov_1w1sck1gbe.f[16]++;cov_1w1sck1gbe.s[55]++;res.send(result);});});//upon successful token verification and data validation, the GET rrequest is handled here
cov_1w1sck1gbe.s[56]++;myServer.get("/charAsKey",(req,res)=>{cov_1w1sck1gbe.f[17]++;cov_1w1sck1gbe.s[57]++;//this function returns a json object with characters as key and its occurrence as values
library.charAsKey(req.body,result=>{cov_1w1sck1gbe.f[18]++;cov_1w1sck1gbe.s[58]++;res.send(result);});});//upon successful token verification and data validation, the GET rrequest is handled here
cov_1w1sck1gbe.s[59]++;myServer.get("/isArmstrong",(req,res)=>{cov_1w1sck1gbe.f[19]++;cov_1w1sck1gbe.s[60]++;//this function checks whether the given number is armstrong or not
library.armstrong(req.query.num,result=>{cov_1w1sck1gbe.f[20]++;cov_1w1sck1gbe.s[61]++;if(result){cov_1w1sck1gbe.b[8][0]++;cov_1w1sck1gbe.s[62]++;res.send("Hurrah! "+req.query.num+" is an Armstrong Number");}else{cov_1w1sck1gbe.b[8][1]++;cov_1w1sck1gbe.s[63]++;res.send("Alas, "+req.query.num+" is NOT an Armstrong Number");}});});//initializing the server to listen for requests from the specified port id:1656
cov_1w1sck1gbe.s[64]++;myServer.listen(1656,()=>{cov_1w1sck1gbe.f[21]++;cov_1w1sck1gbe.s[65]++;console.log("server listening on port 1656");});cov_1w1sck1gbe.s[66]++;module.exports=myServer;